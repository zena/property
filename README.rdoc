== DESCRIPTION:

Wrap model properties into a single database column and declare properties from within the model.

website: http://zenadmin.org/635
license: MIT

== Status: Beta

The gem works fine, even though it still needs some more features like property definition
changes detections and migrations.

== Usage

You first need to create a migration to add a 'text' field named 'properties' to
your model. Something like this:

 class AddPropertyToContact < ActiveRecord::Migration
   def self.up
     add_column :contacts, :properties, :text
   end

   def self.down
     remove_column :contacts, :properties
   end
 end

Once your database is ready, you need to declare the property columns:

 class Contact < ActiveRecord::Base
   include Property
   property do |p|
     p.string  'first_name', 'name', 'phone'
     p.datetime 'contacted_at', :default => Proc.new {Time.now}
   end
  end

You can now read property values with:

  @contact.prop['first_name']
  @contact.first_name

And set them with:

  @contact.update_attributes('first_name' => 'Mahatma')
  @contact.prop['name'] = 'Gandhi'
  @contact.name = 'Gandhi'

== Behaviors

Properties would not be really fun if you could not add new properties to your instances depending
on some flags. First define the behaviors:

  @a_picture = Property::Behavior.new do |p|
    p.integer :width,  :default => :get_width
    p.integer :height, :default => :get_height
    p.string  'camera'
    p.string  'location'
  end

And then, either when creating new pictures or updating them, you need to include the behavior:

  @model.behave_like @a_picture

The model now has the picture's properties defined, with accessors like @model.camera and default
values will be fetched on save.

Note that you do not need to include a behavior just to read the data as long as you use the 'prop'
accessor.

